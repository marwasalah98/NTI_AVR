
NTI_new_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  000012c0  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800114  00800114  00001408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004077  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0a  00000000  00000000  0000586b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000202f  00000000  00000000  00006775  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a88  00000000  00000000  000087a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000146b  00000000  00000000  0000922c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028fb  00000000  00000000  0000a697  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000cf92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_1>
       8:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_2>
       c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_3>
      10:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_4>
      14:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__vector_5>
      18:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_6>
      1c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_7>
      20:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_8>
      24:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_9>
      28:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_10>
      2c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	a8 07       	cpc	r26, r24
      56:	b2 07       	cpc	r27, r18
      58:	bc 07       	cpc	r27, r28
      5a:	c6 07       	cpc	r28, r22
      5c:	d0 07       	cpc	r29, r16
      5e:	da 07       	cpc	r29, r26
      60:	e4 07       	cpc	r30, r20
      62:	ee 07       	cpc	r30, r30

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 ec       	ldi	r30, 0xC0	; 192
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 31       	cpi	r26, 0x14	; 20
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a4 e1       	ldi	r26, 0x14	; 20
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a9 33       	cpi	r26, 0x39	; 57
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <main>
      9a:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Pushbutton_state>:
#include "DIO.h"

pb_state_t Pushbutton_state(pb_id_t   button)//7,6,5,3
{
	pb_state_t  state=NOTPRESSED;
	switch(button)
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	51 f0       	breq	.+20     	; 0xba <Pushbutton_state+0x18>
      a6:	28 f0       	brcs	.+10     	; 0xb2 <Pushbutton_state+0x10>
      a8:	82 30       	cpi	r24, 0x02	; 2
      aa:	59 f0       	breq	.+22     	; 0xc2 <Pushbutton_state+0x20>
      ac:	83 30       	cpi	r24, 0x03	; 3
      ae:	69 f0       	breq	.+26     	; 0xca <Pushbutton_state+0x28>
      b0:	10 c0       	rjmp	.+32     	; 0xd2 <Pushbutton_state+0x30>
	{
		case pd_1:
		state=DIO_u8GetPinValue(PA0);
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
		break;
      b8:	08 95       	ret
		
		case pd_2:
		state=DIO_u8GetPinValue(PA1);
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
		break;
      c0:	08 95       	ret
		
		case pd_3:
		state=DIO_u8GetPinValue(PA7);
      c2:	87 e0       	ldi	r24, 0x07	; 7
      c4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
		break;
      c8:	08 95       	ret
		
		case pd_4:
		state=DIO_u8GetPinValue(PB6);
      ca:	8e e0       	ldi	r24, 0x0E	; 14
      cc:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
		break;
      d0:	08 95       	ret
#include "Button.h"
#include "DIO.h"

pb_state_t Pushbutton_state(pb_id_t   button)//7,6,5,3
{
	pb_state_t  state=NOTPRESSED;
      d2:	81 e0       	ldi	r24, 0x01	; 1
		state=DIO_u8GetPinValue(PB6);
		break;
	}
	return state;
	
}//presses/not
      d4:	08 95       	ret

000000d6 <Keypad_Init>:
u8	arr_col[COL]={PD7,PD6,PD5,PD3};
extern u8 arr_keypad[ROW][COL];

void Keypad_Init(void)
{
	DIO_vSetPinMode(ROW1,OUTPUT_HIGH);
      d6:	61 e0       	ldi	r22, 0x01	; 1
      d8:	85 e1       	ldi	r24, 0x15	; 21
      da:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW2,OUTPUT_HIGH);
      de:	61 e0       	ldi	r22, 0x01	; 1
      e0:	84 e1       	ldi	r24, 0x14	; 20
      e2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW3,OUTPUT_HIGH);
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	83 e1       	ldi	r24, 0x13	; 19
      ea:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(ROW4,OUTPUT_HIGH);
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	82 e1       	ldi	r24, 0x12	; 18
      f2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(COL1,INPUT_PULLUP);
      f6:	63 e0       	ldi	r22, 0x03	; 3
      f8:	8f e1       	ldi	r24, 0x1F	; 31
      fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(COL2,INPUT_PULLUP);
      fe:	63 e0       	ldi	r22, 0x03	; 3
     100:	8e e1       	ldi	r24, 0x1E	; 30
     102:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(COL3,INPUT_PULLUP);
     106:	63 e0       	ldi	r22, 0x03	; 3
     108:	8d e1       	ldi	r24, 0x1D	; 29
     10a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(COL4,INPUT_PULLUP);
     10e:	63 e0       	ldi	r22, 0x03	; 3
     110:	8b e1       	ldi	r24, 0x1B	; 27
     112:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     116:	08 95       	ret

00000118 <keypad_getkey>:
}

u8 keypad_getkey(void)
{
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vSetPinMode(COL4,INPUT_PULLUP);
}

u8 keypad_getkey(void)
{
	u8 key=NO_KEY;
     126:	0f 2e       	mov	r0, r31
     128:	f4 e5       	ldi	r31, 0x54	; 84
     12a:	ff 2e       	mov	r15, r31
     12c:	f0 2d       	mov	r31, r0
	for(int i=0;i<ROW;i++)
     12e:	3a c0       	rjmp	.+116    	; 0x1a4 <keypad_getkey+0x8c>
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	f8 01       	movw	r30, r16
     134:	ec 59       	subi	r30, 0x9C	; 156
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	80 81       	ld	r24, Z
     13a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
		for(int j=0;j<COL;j++)
     13e:	c0 e0       	ldi	r28, 0x00	; 0
     140:	d0 e0       	ldi	r29, 0x00	; 0
     142:	24 c0       	rjmp	.+72     	; 0x18c <keypad_getkey+0x74>
		{
			if(DIO_u8GetPinValue(arr_col[j])==LOW)
     144:	fe 01       	movw	r30, r28
     146:	e0 5a       	subi	r30, 0xA0	; 160
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 81       	ld	r24, Z
     14c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     150:	81 11       	cpse	r24, r1
     152:	1b c0       	rjmp	.+54     	; 0x18a <keypad_getkey+0x72>
			{
				key=arr_keypad[i][j];
     154:	f8 01       	movw	r30, r16
     156:	ee 0f       	add	r30, r30
     158:	ff 1f       	adc	r31, r31
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	e8 59       	subi	r30, 0x98	; 152
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	ec 0f       	add	r30, r28
     164:	fd 1f       	adc	r31, r29
     166:	f0 80       	ld	r15, Z
// 				_delay_ms(1);
				while(DIO_u8GetPinValue(arr_col[j])==LOW);
     168:	fe 01       	movw	r30, r28
     16a:	e0 5a       	subi	r30, 0xA0	; 160
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	80 81       	ld	r24, Z
     170:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     174:	88 23       	and	r24, r24
     176:	c1 f3       	breq	.-16     	; 0x168 <keypad_getkey+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     178:	2f e7       	ldi	r18, 0x7F	; 127
     17a:	85 eb       	ldi	r24, 0xB5	; 181
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	21 50       	subi	r18, 0x01	; 1
     180:	80 40       	sbci	r24, 0x00	; 0
     182:	90 40       	sbci	r25, 0x00	; 0
     184:	e1 f7       	brne	.-8      	; 0x17e <keypad_getkey+0x66>
     186:	00 c0       	rjmp	.+0      	; 0x188 <keypad_getkey+0x70>
     188:	00 00       	nop
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
	{
		DIO_vSetPinMode(arr_row[i],OUTPUT_LOW);
		for(int j=0;j<COL;j++)
     18a:	21 96       	adiw	r28, 0x01	; 1
     18c:	c4 30       	cpi	r28, 0x04	; 4
     18e:	d1 05       	cpc	r29, r1
     190:	cc f2       	brlt	.-78     	; 0x144 <keypad_getkey+0x2c>
				_delay_ms(35);
				
			}
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
     192:	f8 01       	movw	r30, r16
     194:	ec 59       	subi	r30, 0x9C	; 156
     196:	ff 4f       	sbci	r31, 0xFF	; 255
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	80 81       	ld	r24, Z
     19c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
}

u8 keypad_getkey(void)
{
	u8 key=NO_KEY;
	for(int i=0;i<ROW;i++)
     1a0:	0f 5f       	subi	r16, 0xFF	; 255
     1a2:	1f 4f       	sbci	r17, 0xFF	; 255
     1a4:	04 30       	cpi	r16, 0x04	; 4
     1a6:	11 05       	cpc	r17, r1
     1a8:	1c f2       	brlt	.-122    	; 0x130 <keypad_getkey+0x18>
			
		}
		DIO_vSetPinMode(arr_row[i],OUTPUT_HIGH);
	}
	return key;
}
     1aa:	8f 2d       	mov	r24, r15
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	ff 90       	pop	r15
     1b6:	08 95       	ret

000001b8 <LCD_WriteIns>:
	for(;i>0;i--)
	{
		LCD_WriteChar(temp%10 + '0');
		temp/=10;
	}
}
     1b8:	cf 93       	push	r28
     1ba:	c8 2f       	mov	r28, r24
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1c4:	6c 2f       	mov	r22, r28
     1c6:	66 1f       	adc	r22, r22
     1c8:	66 27       	eor	r22, r22
     1ca:	66 1f       	adc	r22, r22
     1cc:	8c e0       	ldi	r24, 0x0C	; 12
     1ce:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1d2:	c6 fb       	bst	r28, 6
     1d4:	66 27       	eor	r22, r22
     1d6:	60 f9       	bld	r22, 0
     1d8:	8a e0       	ldi	r24, 0x0A	; 10
     1da:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1de:	c5 fb       	bst	r28, 5
     1e0:	66 27       	eor	r22, r22
     1e2:	60 f9       	bld	r22, 0
     1e4:	89 e0       	ldi	r24, 0x09	; 9
     1e6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1ea:	c4 fb       	bst	r28, 4
     1ec:	66 27       	eor	r22, r22
     1ee:	60 f9       	bld	r22, 0
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1f6:	61 e0       	ldi	r22, 0x01	; 1
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     1fe:	8f e9       	ldi	r24, 0x9F	; 159
     200:	9f e0       	ldi	r25, 0x0F	; 15
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <LCD_WriteIns+0x4a>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_WriteIns+0x50>
     208:	00 00       	nop
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     212:	8f e9       	ldi	r24, 0x9F	; 159
     214:	9f e0       	ldi	r25, 0x0F	; 15
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <LCD_WriteIns+0x5e>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_WriteIns+0x64>
     21c:	00 00       	nop
     21e:	c3 fb       	bst	r28, 3
     220:	66 27       	eor	r22, r22
     222:	60 f9       	bld	r22, 0
     224:	8c e0       	ldi	r24, 0x0C	; 12
     226:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     22a:	c2 fb       	bst	r28, 2
     22c:	66 27       	eor	r22, r22
     22e:	60 f9       	bld	r22, 0
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     236:	c1 fb       	bst	r28, 1
     238:	66 27       	eor	r22, r22
     23a:	60 f9       	bld	r22, 0
     23c:	89 e0       	ldi	r24, 0x09	; 9
     23e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     242:	6c 2f       	mov	r22, r28
     244:	61 70       	andi	r22, 0x01	; 1
     246:	88 e0       	ldi	r24, 0x08	; 8
     248:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     254:	8f e9       	ldi	r24, 0x9F	; 159
     256:	9f e0       	ldi	r25, 0x0F	; 15
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <LCD_WriteIns+0xa0>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <LCD_WriteIns+0xa6>
     25e:	00 00       	nop
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     268:	8f e9       	ldi	r24, 0x9F	; 159
     26a:	9f e0       	ldi	r25, 0x0F	; 15
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_WriteIns+0xb4>
     270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_WriteIns+0xba>
     272:	00 00       	nop
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <LCD_Init>:
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	80 e7       	ldi	r24, 0x70	; 112
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	80 40       	sbci	r24, 0x00	; 0
     282:	90 40       	sbci	r25, 0x00	; 0
     284:	e1 f7       	brne	.-8      	; 0x27e <LCD_Init+0x6>
     286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Init+0x10>
     288:	00 00       	nop
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     296:	8c e0       	ldi	r24, 0x0C	; 12
     298:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     2a2:	8f e9       	ldi	r24, 0x9F	; 159
     2a4:	9f e0       	ldi	r25, 0x0F	; 15
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_Init+0x2e>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_Init+0x34>
     2ac:	00 00       	nop
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     2b4:	08 95       	ret

000002b6 <LCD_goto>:
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <LCD_goto+0x10>
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	31 f0       	breq	.+12     	; 0x2ca <LCD_goto+0x14>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	29 f4       	brne	.+10     	; 0x2cc <LCD_goto+0x16>
     2c2:	60 5c       	subi	r22, 0xC0	; 192
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <LCD_goto+0x16>
     2c6:	6c 5e       	subi	r22, 0xEC	; 236
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <LCD_goto+0x16>
     2ca:	6c 5a       	subi	r22, 0xAC	; 172
     2cc:	86 2f       	mov	r24, r22
     2ce:	80 68       	ori	r24, 0x80	; 128
     2d0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     2d4:	08 95       	ret

000002d6 <LCD_Clear>:
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_WriteIns>
     2dc:	8f e3       	ldi	r24, 0x3F	; 63
     2de:	9f e1       	ldi	r25, 0x1F	; 31
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_Clear+0xa>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <LCD_Clear+0x10>
     2e6:	00 00       	nop
     2e8:	08 95       	ret

000002ea <LCD_WriteData>:
     2ea:	cf 93       	push	r28
     2ec:	c8 2f       	mov	r28, r24
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	83 e0       	ldi	r24, 0x03	; 3
     2f2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     2f6:	6c 2f       	mov	r22, r28
     2f8:	66 1f       	adc	r22, r22
     2fa:	66 27       	eor	r22, r22
     2fc:	66 1f       	adc	r22, r22
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     304:	c6 fb       	bst	r28, 6
     306:	66 27       	eor	r22, r22
     308:	60 f9       	bld	r22, 0
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     310:	c5 fb       	bst	r28, 5
     312:	66 27       	eor	r22, r22
     314:	60 f9       	bld	r22, 0
     316:	89 e0       	ldi	r24, 0x09	; 9
     318:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     31c:	c4 fb       	bst	r28, 4
     31e:	66 27       	eor	r22, r22
     320:	60 f9       	bld	r22, 0
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	9f e0       	ldi	r25, 0x0F	; 15
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <LCD_WriteData+0x4a>
     338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_WriteData+0x50>
     33a:	00 00       	nop
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     344:	8f e9       	ldi	r24, 0x9F	; 159
     346:	9f e0       	ldi	r25, 0x0F	; 15
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_WriteData+0x5e>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_WriteData+0x64>
     34e:	00 00       	nop
     350:	c3 fb       	bst	r28, 3
     352:	66 27       	eor	r22, r22
     354:	60 f9       	bld	r22, 0
     356:	8c e0       	ldi	r24, 0x0C	; 12
     358:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     35c:	c2 fb       	bst	r28, 2
     35e:	66 27       	eor	r22, r22
     360:	60 f9       	bld	r22, 0
     362:	8a e0       	ldi	r24, 0x0A	; 10
     364:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     368:	c1 fb       	bst	r28, 1
     36a:	66 27       	eor	r22, r22
     36c:	60 f9       	bld	r22, 0
     36e:	89 e0       	ldi	r24, 0x09	; 9
     370:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     374:	6c 2f       	mov	r22, r28
     376:	61 70       	andi	r22, 0x01	; 1
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     386:	8f e9       	ldi	r24, 0x9F	; 159
     388:	9f e0       	ldi	r25, 0x0F	; 15
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_WriteData+0xa0>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_WriteData+0xa6>
     390:	00 00       	nop
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     39a:	8f e9       	ldi	r24, 0x9F	; 159
     39c:	9f e0       	ldi	r25, 0x0F	; 15
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_WriteData+0xb4>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_WriteData+0xba>
     3a4:	00 00       	nop
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <LCD_WriteChar>:
     3aa:	0e 94 75 01 	call	0x2ea	; 0x2ea <LCD_WriteData>
     3ae:	08 95       	ret

000003b0 <LCD_WriteString>:
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	8c 01       	movw	r16, r24
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <LCD_WriteString+0x12>
     3bc:	cf 5f       	subi	r28, 0xFF	; 255
     3be:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_WriteChar>
     3c2:	f8 01       	movw	r30, r16
     3c4:	ec 0f       	add	r30, r28
     3c6:	f1 1d       	adc	r31, r1
     3c8:	80 81       	ld	r24, Z
     3ca:	81 11       	cpse	r24, r1
     3cc:	f7 cf       	rjmp	.-18     	; 0x3bc <LCD_WriteString+0xc>
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <LCD_Write_stringGoTo>:
	_delay_ms(1);
	DIO_vSetPinMode(EN,OUTPUT_LOW);
	_delay_ms(1);
}
void LCD_Write_stringGoTo(u8 line,u8 cell,char*str)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ea 01       	movw	r28, r20
	LCD_goto(line,cell);
     3dc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_goto>
	LCD_WriteString(str);
     3e0:	ce 01       	movw	r24, r28
     3e2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCD_WriteString>
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <LED_Init>:
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	59 f0       	breq	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3f0:	28 f0       	brcs	.+10     	; 0x3fc <LED_Init+0x10>
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	69 f0       	breq	.+26     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	81 f0       	breq	.+32     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3fa:	08 95       	ret
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     404:	08 95       	ret
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     40e:	08 95       	ret
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     418:	08 95       	ret
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	86 e0       	ldi	r24, 0x06	; 6
     41e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     422:	08 95       	ret

00000424 <LED_setmode>:
     424:	61 30       	cpi	r22, 0x01	; 1
     426:	e1 f4       	brne	.+56     	; 0x460 <LED_setmode+0x3c>
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	59 f0       	breq	.+22     	; 0x442 <LED_setmode+0x1e>
     42c:	28 f0       	brcs	.+10     	; 0x438 <LED_setmode+0x14>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	69 f0       	breq	.+26     	; 0x44c <LED_setmode+0x28>
     432:	83 30       	cpi	r24, 0x03	; 3
     434:	81 f0       	breq	.+32     	; 0x456 <LED_setmode+0x32>
     436:	08 95       	ret
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8f e0       	ldi	r24, 0x0F	; 15
     43c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     440:	08 95       	ret
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     44a:	08 95       	ret
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     454:	08 95       	ret
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	86 e0       	ldi	r24, 0x06	; 6
     45a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     45e:	08 95       	ret
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	59 f0       	breq	.+22     	; 0x47a <LED_setmode+0x56>
     464:	28 f0       	brcs	.+10     	; 0x470 <LED_setmode+0x4c>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	69 f0       	breq	.+26     	; 0x484 <LED_setmode+0x60>
     46a:	83 30       	cpi	r24, 0x03	; 3
     46c:	81 f0       	breq	.+32     	; 0x48e <LED_setmode+0x6a>
     46e:	08 95       	ret
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	8f e0       	ldi	r24, 0x0F	; 15
     474:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     478:	08 95       	ret
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     482:	08 95       	ret
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     48c:	08 95       	ret
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     496:	08 95       	ret

00000498 <LED_toggle>:
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	a9 f0       	breq	.+42     	; 0x4c6 <LED_toggle+0x2e>
     49c:	28 f0       	brcs	.+10     	; 0x4a8 <LED_toggle+0x10>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	09 f1       	breq	.+66     	; 0x4e4 <LED_toggle+0x4c>
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	71 f1       	breq	.+92     	; 0x502 <LED_toggle+0x6a>
     4a6:	08 95       	ret
     4a8:	8f e0       	ldi	r24, 0x0F	; 15
     4aa:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     4ae:	88 23       	and	r24, r24
     4b0:	29 f0       	breq	.+10     	; 0x4bc <LED_toggle+0x24>
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	8f e0       	ldi	r24, 0x0F	; 15
     4b6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     4ba:	08 95       	ret
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8f e0       	ldi	r24, 0x0F	; 15
     4c0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     4c4:	08 95       	ret
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     4cc:	88 23       	and	r24, r24
     4ce:	29 f0       	breq	.+10     	; 0x4da <LED_toggle+0x42>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	84 e0       	ldi	r24, 0x04	; 4
     4d4:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     4d8:	08 95       	ret
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     4e2:	08 95       	ret
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     4ea:	88 23       	and	r24, r24
     4ec:	29 f0       	breq	.+10     	; 0x4f8 <LED_toggle+0x60>
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	85 e0       	ldi	r24, 0x05	; 5
     4f2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     4f6:	08 95       	ret
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	85 e0       	ldi	r24, 0x05	; 5
     4fc:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     500:	08 95       	ret
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	0e 94 e6 06 	call	0xdcc	; 0xdcc <DIO_u8GetPinValue>
     508:	88 23       	and	r24, r24
     50a:	29 f0       	breq	.+10     	; 0x516 <LED_toggle+0x7e>
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	86 e0       	ldi	r24, 0x06	; 6
     510:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     514:	08 95       	ret
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	86 e0       	ldi	r24, 0x06	; 6
     51a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
     51e:	08 95       	ret

00000520 <light_func>:
static volatile u16 timer_counter =0;
static u32 counter=0;

void light_func (void)//0.5sec ,0.25sec
{
	timer_counter ++;
     520:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <timer_counter>
     524:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <timer_counter+0x1>
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <timer_counter+0x1>
     52e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <timer_counter>
	TCNT0=6;
     532:	86 e0       	ldi	r24, 0x06	; 6
     534:	82 bf       	out	0x32, r24	; 50

	static u8 back_short_flag=0;
	static u8 back_long_flag =0;


	if(timer_counter % 1000 == 0) //8000 ov = 1 sec      -> 1000 = 0.125 sec
     536:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <timer_counter>
     53a:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <timer_counter+0x1>
     53e:	9a 01       	movw	r18, r20
     540:	36 95       	lsr	r19
     542:	27 95       	ror	r18
     544:	36 95       	lsr	r19
     546:	27 95       	ror	r18
     548:	36 95       	lsr	r19
     54a:	27 95       	ror	r18
     54c:	a5 ec       	ldi	r26, 0xC5	; 197
     54e:	b0 e2       	ldi	r27, 0x20	; 32
     550:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     554:	92 95       	swap	r25
     556:	82 95       	swap	r24
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	89 27       	eor	r24, r25
     55c:	9f 70       	andi	r25, 0x0F	; 15
     55e:	89 27       	eor	r24, r25
     560:	68 ee       	ldi	r22, 0xE8	; 232
     562:	73 e0       	ldi	r23, 0x03	; 3
     564:	86 9f       	mul	r24, r22
     566:	90 01       	movw	r18, r0
     568:	87 9f       	mul	r24, r23
     56a:	30 0d       	add	r19, r0
     56c:	96 9f       	mul	r25, r22
     56e:	30 0d       	add	r19, r0
     570:	11 24       	eor	r1, r1
     572:	42 17       	cp	r20, r18
     574:	53 07       	cpc	r21, r19
     576:	09 f0       	breq	.+2      	; 0x57a <light_func+0x5a>
     578:	9c c0       	rjmp	.+312    	; 0x6b2 <light_func+0x192>
	{
		switch(pb1_State_right)
     57a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <pb1_State_right>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	79 f0       	breq	.+30     	; 0x5a0 <light_func+0x80>
     582:	28 f0       	brcs	.+10     	; 0x58e <light_func+0x6e>
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	a9 f0       	breq	.+42     	; 0x5b2 <light_func+0x92>
     588:	83 30       	cpi	r24, 0x03	; 3
     58a:	c9 f0       	breq	.+50     	; 0x5be <light_func+0x9e>
     58c:	1d c0       	rjmp	.+58     	; 0x5c8 <light_func+0xa8>
		{
		  case PRESSED_ONCE :
		  LED_setmode(RIGHT_LED,HIGH);
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
		  right_short_flag=0;
     596:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <right_short_flag.2127>
		  right_long_flag=0 ;
     59a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <right_long_flag.2128>
		  break;
     59e:	14 c0       	rjmp	.+40     	; 0x5c8 <light_func+0xa8>

		case PRESSED_TWICE:
		LED_setmode(RIGHT_LED,LOW) ;
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
		right_short_flag=0;
     5a8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <right_short_flag.2127>
		right_long_flag=0 ;
     5ac:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <right_long_flag.2128>
		break;
     5b0:	0b c0       	rjmp	.+22     	; 0x5c8 <light_func+0xa8>

		case SHORT_HOLD   :  right_short_flag=1; right_long_flag=0 ;break;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <right_short_flag.2127>
     5b8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <right_long_flag.2128>
     5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <light_func+0xa8>
		case LONG_HOLD    :  right_short_flag=0; right_long_flag=1 ;break;
     5be:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <right_short_flag.2127>
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <right_long_flag.2128>
		}

		switch(pb2_State_left)
     5c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <pb2_State_left>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	79 f0       	breq	.+30     	; 0x5ee <light_func+0xce>
     5d0:	28 f0       	brcs	.+10     	; 0x5dc <light_func+0xbc>
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	a9 f0       	breq	.+42     	; 0x600 <light_func+0xe0>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	c9 f0       	breq	.+50     	; 0x60c <light_func+0xec>
     5da:	1d c0       	rjmp	.+58     	; 0x616 <light_func+0xf6>
		{
			case PRESSED_ONCE : LED_setmode(LEFT_LED,HIGH); left_short_flag=0; left_long_flag=0 ;break;
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     5e4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <left_short_flag.2129>
     5e8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <left_long_flag.2130>
     5ec:	14 c0       	rjmp	.+40     	; 0x616 <light_func+0xf6>
			case PRESSED_TWICE: LED_setmode(LEFT_LED,LOW) ; left_short_flag=0; left_long_flag=0 ;break;
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     5f6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <left_short_flag.2129>
     5fa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <left_long_flag.2130>
     5fe:	0b c0       	rjmp	.+22     	; 0x616 <light_func+0xf6>
			case SHORT_HOLD   :  left_short_flag=1; left_long_flag=0 ;break;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <left_short_flag.2129>
     606:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <left_long_flag.2130>
     60a:	05 c0       	rjmp	.+10     	; 0x616 <light_func+0xf6>
			case LONG_HOLD    :  left_short_flag=0; left_long_flag=1 ;break;
     60c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <left_short_flag.2129>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <left_long_flag.2130>
		}

		switch(pb3_State_front)//b3
     616:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <pb3_State_front>
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	79 f0       	breq	.+30     	; 0x63c <light_func+0x11c>
     61e:	28 f0       	brcs	.+10     	; 0x62a <light_func+0x10a>
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	a9 f0       	breq	.+42     	; 0x64e <light_func+0x12e>
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	c9 f0       	breq	.+50     	; 0x65a <light_func+0x13a>
     628:	1d c0       	rjmp	.+58     	; 0x664 <light_func+0x144>
		{
			case PRESSED_ONCE : LED_setmode(FRONT_LED,HIGH); front_short_flag=0; front_long_flag=0 ;break;
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     632:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <front_short_flag.2131>
     636:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <front_long_flag.2132>
     63a:	14 c0       	rjmp	.+40     	; 0x664 <light_func+0x144>
			case PRESSED_TWICE: LED_setmode(FRONT_LED,LOW) ; front_short_flag=0; front_long_flag=0 ;break;
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     644:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <front_short_flag.2131>
     648:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <front_long_flag.2132>
     64c:	0b c0       	rjmp	.+22     	; 0x664 <light_func+0x144>
			case SHORT_HOLD   :  front_short_flag=1; front_long_flag=0 ;break;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <front_short_flag.2131>
     654:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <front_long_flag.2132>
     658:	05 c0       	rjmp	.+10     	; 0x664 <light_func+0x144>
			case LONG_HOLD    :  front_short_flag=0; front_long_flag=1 ;break;
     65a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <front_short_flag.2131>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <front_long_flag.2132>
		}

		switch(pb4_State_back)
     664:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <pb4_State_back>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	79 f0       	breq	.+30     	; 0x68a <light_func+0x16a>
     66c:	28 f0       	brcs	.+10     	; 0x678 <light_func+0x158>
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	a9 f0       	breq	.+42     	; 0x69c <light_func+0x17c>
     672:	83 30       	cpi	r24, 0x03	; 3
     674:	c9 f0       	breq	.+50     	; 0x6a8 <light_func+0x188>
     676:	1d c0       	rjmp	.+58     	; 0x6b2 <light_func+0x192>
		{
			case PRESSED_ONCE : LED_setmode(BACK_LED,HIGH); back_short_flag=0; back_long_flag=0 ;break;
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     680:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <back_short_flag.2133>
     684:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
     688:	14 c0       	rjmp	.+40     	; 0x6b2 <light_func+0x192>
			case PRESSED_TWICE: LED_setmode(BACK_LED,LOW) ; back_short_flag=0; back_long_flag=0 ;break;
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 12 02 	call	0x424	; 0x424 <LED_setmode>
     692:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <back_short_flag.2133>
     696:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <light_func+0x192>
			case SHORT_HOLD   :  back_short_flag=1; back_long_flag=0 ;break;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <back_short_flag.2133>
     6a2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
     6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <light_func+0x192>
			case LONG_HOLD    :  back_short_flag=0; back_long_flag=1 ;break;
     6a8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <back_short_flag.2133>
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>


	}


	if(timer_counter % 2000 == 0)//each 0.25 sec     //long
     6b2:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <timer_counter>
     6b6:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <timer_counter+0x1>
     6ba:	9a 01       	movw	r18, r20
     6bc:	32 95       	swap	r19
     6be:	22 95       	swap	r18
     6c0:	2f 70       	andi	r18, 0x0F	; 15
     6c2:	23 27       	eor	r18, r19
     6c4:	3f 70       	andi	r19, 0x0F	; 15
     6c6:	23 27       	eor	r18, r19
     6c8:	a3 e6       	ldi	r26, 0x63	; 99
     6ca:	b0 e1       	ldi	r27, 0x10	; 16
     6cc:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	60 ed       	ldi	r22, 0xD0	; 208
     6de:	77 e0       	ldi	r23, 0x07	; 7
     6e0:	86 9f       	mul	r24, r22
     6e2:	90 01       	movw	r18, r0
     6e4:	87 9f       	mul	r24, r23
     6e6:	30 0d       	add	r19, r0
     6e8:	96 9f       	mul	r25, r22
     6ea:	30 0d       	add	r19, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	42 17       	cp	r20, r18
     6f0:	53 07       	cpc	r21, r19
     6f2:	d9 f4       	brne	.+54     	; 0x72a <light_func+0x20a>
	{
		if(right_long_flag == 1)//button
     6f4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <right_long_flag.2128>
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	19 f4       	brne	.+6      	; 0x702 <light_func+0x1e2>
		{
		 LED_toggle(RIGHT_LED);
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(left_long_flag == 1)
     702:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <left_long_flag.2130>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	19 f4       	brne	.+6      	; 0x710 <light_func+0x1f0>
		{
		 LED_toggle(LEFT_LED);
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(front_long_flag == 1)
     710:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <front_long_flag.2132>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	11 f4       	brne	.+4      	; 0x71c <light_func+0x1fc>
		{
		 LED_toggle(FRONT_LED);
     718:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(back_long_flag == 1)
     71c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	19 f4       	brne	.+6      	; 0x72a <light_func+0x20a>
		{
		 LED_toggle(BACK_LED);
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
	}

	if(timer_counter % 4000==0 )//each 0.5 sec     //short
     72a:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <timer_counter>
     72e:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <timer_counter+0x1>
     732:	9a 01       	movw	r18, r20
     734:	36 95       	lsr	r19
     736:	27 95       	ror	r18
     738:	32 95       	swap	r19
     73a:	22 95       	swap	r18
     73c:	2f 70       	andi	r18, 0x0F	; 15
     73e:	23 27       	eor	r18, r19
     740:	3f 70       	andi	r19, 0x0F	; 15
     742:	23 27       	eor	r18, r19
     744:	a9 e1       	ldi	r26, 0x19	; 25
     746:	b4 e0       	ldi	r27, 0x04	; 4
     748:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     74c:	96 95       	lsr	r25
     74e:	87 95       	ror	r24
     750:	60 ea       	ldi	r22, 0xA0	; 160
     752:	7f e0       	ldi	r23, 0x0F	; 15
     754:	86 9f       	mul	r24, r22
     756:	90 01       	movw	r18, r0
     758:	87 9f       	mul	r24, r23
     75a:	30 0d       	add	r19, r0
     75c:	96 9f       	mul	r25, r22
     75e:	30 0d       	add	r19, r0
     760:	11 24       	eor	r1, r1
     762:	42 17       	cp	r20, r18
     764:	53 07       	cpc	r21, r19
     766:	f9 f4       	brne	.+62     	; 0x7a6 <light_func+0x286>
	{
		if(right_short_flag == 1)
     768:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <right_short_flag.2127>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	19 f4       	brne	.+6      	; 0x776 <light_func+0x256>
		{
			LED_toggle(RIGHT_LED);
     770:	83 e0       	ldi	r24, 0x03	; 3
     772:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(left_short_flag == 1)
     776:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <left_short_flag.2129>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	19 f4       	brne	.+6      	; 0x784 <light_func+0x264>
		{
			LED_toggle(LEFT_LED);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(front_short_flag == 1)
     784:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <front_short_flag.2131>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	11 f4       	brne	.+4      	; 0x790 <light_func+0x270>
		{
			LED_toggle(FRONT_LED);
     78c:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		if(back_short_flag == 1)
     790:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <back_short_flag.2133>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	19 f4       	brne	.+6      	; 0x79e <light_func+0x27e>
		{
			LED_toggle(BACK_LED);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 4c 02 	call	0x498	; 0x498 <LED_toggle>
		}
		timer_counter=0;
     79e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <timer_counter+0x1>
     7a2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <timer_counter>
     7a6:	08 95       	ret

000007a8 <main>:

#define   PASSWORD     (1234) 

int main(void)
{
	DIO_vSetPinMode(PC0,OUTPUT_LOW);//MOTOR
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(PC1,OUTPUT_LOW); 
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	81 e1       	ldi	r24, 0x11	; 17
     7b4:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	
	LCD_Init();
     7b8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Init>
	Keypad_Init();
     7bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <Keypad_Init>

	TIMER0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8);//tick.time 0.5Msec,cpu freq =16
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 7a 07 	call	0xef4	; 0xef4 <TIMER0_Init>
	TIMER0_OVF_InterruptEnable();
     7c8:	0e 94 f8 07 	call	0xff0	; 0xff0 <TIMER0_OVF_InterruptEnable>
	TIMER0_OVF_SetCallBack(light_func);
     7cc:	80 e9       	ldi	r24, 0x90	; 144
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 fc 07 	call	0xff8	; 0xff8 <TIMER0_OVF_SetCallBack>
	sei();
     7d4:	78 94       	sei
	u8 flag_Twice_Back=0,count_Twice_Back=0;
	
	//flag_Twice=0;
	// u8 count_Right=0, count_Left=0,count_Front=0,count_Back=0;

	LED_Init(RED_LED);
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_Init>
	LED_Init(YELLOW_LED);
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_Init>
	LED_Init(GREEN_LED);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_Init>
	LED_Init(BLUE_LED);
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LED_Init>


	DIO_vSetPinMode(PA0,INPUT_PULLUP);
     7ee:	63 e0       	ldi	r22, 0x03	; 3
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(PA1,INPUT_PULLUP);
     7f6:	63 e0       	ldi	r22, 0x03	; 3
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(PA7,INPUT_PULLUP);
     7fe:	63 e0       	ldi	r22, 0x03	; 3
     800:	87 e0       	ldi	r24, 0x07	; 7
     802:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
	DIO_vSetPinMode(PB6,INPUT_PULLUP);
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	8e e0       	ldi	r24, 0x0E	; 14
     80a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>

    LCD_Write_stringGoTo(0,0,"Enter password");
     80e:	44 e9       	ldi	r20, 0x94	; 148
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
    LCD_goto(1,0);
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_goto>
	
	
	u16 num=0;
	u8 No_digit=1;	
     822:	11 e0       	ldi	r17, 0x01	; 1

    LCD_Write_stringGoTo(0,0,"Enter password");
    LCD_goto(1,0);
	
	
	u16 num=0;
     824:	c0 e0       	ldi	r28, 0x00	; 0
     826:	d0 e0       	ldi	r29, 0x00	; 0
	u8 No_digit=1;	
	while(No_digit<=4)
     828:	59 c0       	rjmp	.+178    	; 0x8dc <__stack+0x7d>
	{
		u8 k=keypad_getkey();
     82a:	0e 94 8c 00 	call	0x118	; 0x118 <keypad_getkey>
		if(k>='0'&& k<='9')
     82e:	90 ed       	ldi	r25, 0xD0	; 208
     830:	98 0f       	add	r25, r24
     832:	9a 30       	cpi	r25, 0x0A	; 10
     834:	b8 f4       	brcc	.+46     	; 0x864 <__stack+0x5>
		{
			num=(num*10)+k-'0'; //string to int
     836:	9e 01       	movw	r18, r28
     838:	22 0f       	add	r18, r18
     83a:	33 1f       	adc	r19, r19
     83c:	cc 0f       	add	r28, r28
     83e:	dd 1f       	adc	r29, r29
     840:	cc 0f       	add	r28, r28
     842:	dd 1f       	adc	r29, r29
     844:	cc 0f       	add	r28, r28
     846:	dd 1f       	adc	r29, r29
     848:	c2 0f       	add	r28, r18
     84a:	d3 1f       	adc	r29, r19
     84c:	c8 0f       	add	r28, r24
     84e:	d1 1d       	adc	r29, r1
     850:	e0 97       	sbiw	r28, 0x30	; 48
			LCD_goto(1,No_digit-1);
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	61 0f       	add	r22, r17
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_goto>
			LCD_WriteChar('*');
     85c:	8a e2       	ldi	r24, 0x2A	; 42
     85e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_WriteChar>
			No_digit++;
     862:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		if(No_digit==5)
     864:	15 30       	cpi	r17, 0x05	; 5
     866:	d1 f5       	brne	.+116    	; 0x8dc <__stack+0x7d>
		{
			if(num==PASSWORD)
     868:	c2 3d       	cpi	r28, 0xD2	; 210
     86a:	24 e0       	ldi	r18, 0x04	; 4
     86c:	d2 07       	cpc	r29, r18
     86e:	d9 f4       	brne	.+54     	; 0x8a6 <__stack+0x47>
			{
				LCD_Write_stringGoTo(0,0,"Right password   ");
     870:	43 ea       	ldi	r20, 0xA3	; 163
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87c:	88 e8       	ldi	r24, 0x88	; 136
     87e:	93 e1       	ldi	r25, 0x13	; 19
     880:	05 c0       	rjmp	.+10     	; 0x88c <__stack+0x2d>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     882:	e0 e9       	ldi	r30, 0x90	; 144
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <__stack+0x27>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     88a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	c9 f7       	brne	.-14     	; 0x882 <__stack+0x23>
				_delay_ms(500);
				DIO_vSetPinMode(PC0,OUTPUT_HIGH);//MOTROR on
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	80 e1       	ldi	r24, 0x10	; 16
     894:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
				DIO_vSetPinMode(PC1,OUTPUT_LOW);
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	81 e1       	ldi	r24, 0x11	; 17
     89c:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_vSetPinMode>
				LCD_Clear();
     8a0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_Clear>
     8a4:	1b c0       	rjmp	.+54     	; 0x8dc <__stack+0x7d>
				
				
			}
			else
			{
				LCD_Write_stringGoTo(0,0,"Wrong Password ! ");
     8a6:	45 eb       	ldi	r20, 0xB5	; 181
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8b2:	88 e8       	ldi	r24, 0x88	; 136
     8b4:	93 e1       	ldi	r25, 0x13	; 19
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <__stack+0x63>
     8b8:	e0 e9       	ldi	r30, 0x90	; 144
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <__stack+0x5d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c2:	00 97       	sbiw	r24, 0x00	; 0
     8c4:	c9 f7       	brne	.-14     	; 0x8b8 <__stack+0x59>
				_delay_ms(500);
				LCD_Clear();
     8c6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_Clear>
				LCD_Write_stringGoTo(0,0,"Enter password");
     8ca:	44 e9       	ldi	r20, 0x94	; 148
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
				No_digit=1;
     8d6:	11 e0       	ldi	r17, 0x01	; 1
				num=0;
     8d8:	c0 e0       	ldi	r28, 0x00	; 0
     8da:	d0 e0       	ldi	r29, 0x00	; 0
    LCD_goto(1,0);
	
	
	u16 num=0;
	u8 No_digit=1;	
	while(No_digit<=4)
     8dc:	15 30       	cpi	r17, 0x05	; 5
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	a4 cf       	rjmp	.-184    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				
			}
		}
	}
	
	LCD_Clear();
     8e2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_Clear>
	LCD_Write_stringGoTo(0,0,"Right :    ");
     8e6:	47 ec       	ldi	r20, 0xC7	; 199
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	LCD_Write_stringGoTo(1,0,"LEFT  :    ");
     8f2:	43 ed       	ldi	r20, 0xD3	; 211
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	LCD_Write_stringGoTo(2,0,"FRONT :    ");
     8fe:	4f ed       	ldi	r20, 0xDF	; 223
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	LCD_Write_stringGoTo(3,0,"BACK  :    ");
     90a:	4b ee       	ldi	r20, 0xEB	; 235
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>

	u8 flag_Right=0, flag_Left=0,flag_Front=0,flag_Back=0;
	u8 flag_Twice_Right=0,count_Twice_Right=0;
	u8 flag_Twice_Left=0,count_Twice_Left=0;
	u8 flag_Twice_Front=0,count_Twice_Front=0;
	u8 flag_Twice_Back=0,count_Twice_Back=0;
     916:	c1 2c       	mov	r12, r1
     918:	00 e0       	ldi	r16, 0x00	; 0
	sei();

	u8 flag_Right=0, flag_Left=0,flag_Front=0,flag_Back=0;
	u8 flag_Twice_Right=0,count_Twice_Right=0;
	u8 flag_Twice_Left=0,count_Twice_Left=0;
	u8 flag_Twice_Front=0,count_Twice_Front=0;
     91a:	d1 2c       	mov	r13, r1
     91c:	10 e0       	ldi	r17, 0x00	; 0
	TIMER0_OVF_SetCallBack(light_func);
	sei();

	u8 flag_Right=0, flag_Left=0,flag_Front=0,flag_Back=0;
	u8 flag_Twice_Right=0,count_Twice_Right=0;
	u8 flag_Twice_Left=0,count_Twice_Left=0;
     91e:	e1 2c       	mov	r14, r1
     920:	d0 e0       	ldi	r29, 0x00	; 0
	TIMER0_OVF_InterruptEnable();
	TIMER0_OVF_SetCallBack(light_func);
	sei();

	u8 flag_Right=0, flag_Left=0,flag_Front=0,flag_Back=0;
	u8 flag_Twice_Right=0,count_Twice_Right=0;
     922:	f1 2c       	mov	r15, r1
     924:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_Write_stringGoTo(2,0,"FRONT :    ");
	LCD_Write_stringGoTo(3,0,"BACK  :    ");
	
	while (1)				  
	{
		counter=0;
     926:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter>
     92a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <counter+0x1>
     92e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <counter+0x2>
     932:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter+0x3>
		if(Pushbutton_state(pd_1)==PRESSED) //RIGHT_LED,YELLOW_LED
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     93c:	81 11       	cpse	r24, r1
     93e:	21 c0       	rjmp	.+66     	; 0x982 <__stack+0x123>
		{
			button_pressed=BUTTON_1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <button_pressed>
			while (Pushbutton_state(pd_1)==PRESSED)
     946:	17 c0       	rjmp	.+46     	; 0x976 <__stack+0x117>
			{

				counter++;
     948:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
     94c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter+0x1>
     950:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter+0x2>
     954:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter+0x3>
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	a1 1d       	adc	r26, r1
     95c:	b1 1d       	adc	r27, r1
     95e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
     962:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter+0x1>
     966:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter+0x2>
     96a:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter+0x3>
     96e:	80 ea       	ldi	r24, 0xA0	; 160
     970:	9f e0       	ldi	r25, 0x0F	; 15
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <__stack+0x113>
	{
		counter=0;
		if(Pushbutton_state(pd_1)==PRESSED) //RIGHT_LED,YELLOW_LED
		{
			button_pressed=BUTTON_1;
			while (Pushbutton_state(pd_1)==PRESSED)
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     97c:	88 23       	and	r24, r24
     97e:	21 f3       	breq	.-56     	; 0x948 <__stack+0xe9>
     980:	75 c0       	rjmp	.+234    	; 0xa6c <__stack+0x20d>

				counter++;
				_delay_ms(1);
			}
		}
		else if(Pushbutton_state( pd_2)==PRESSED)//LEFT_LED,BLUE_LED
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     988:	81 11       	cpse	r24, r1
     98a:	21 c0       	rjmp	.+66     	; 0x9ce <__stack+0x16f>
		{
			button_pressed=BUTTON_2;
     98c:	82 e0       	ldi	r24, 0x02	; 2
     98e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <button_pressed>
			while (Pushbutton_state( pd_2)==PRESSED)
     992:	17 c0       	rjmp	.+46     	; 0x9c2 <__stack+0x163>
			{
				counter++;
     994:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
     998:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter+0x1>
     99c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter+0x2>
     9a0:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter+0x3>
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
     9ae:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter+0x1>
     9b2:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter+0x2>
     9b6:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter+0x3>
     9ba:	80 ea       	ldi	r24, 0xA0	; 160
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <__stack+0x15f>
			}
		}
		else if(Pushbutton_state( pd_2)==PRESSED)//LEFT_LED,BLUE_LED
		{
			button_pressed=BUTTON_2;
			while (Pushbutton_state( pd_2)==PRESSED)
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     9c8:	88 23       	and	r24, r24
     9ca:	21 f3       	breq	.-56     	; 0x994 <__stack+0x135>
     9cc:	4f c0       	rjmp	.+158    	; 0xa6c <__stack+0x20d>
			{
				counter++;
				_delay_ms(1);
			}
		}
		else if(Pushbutton_state(pd_3)==PRESSED)//FRONT_LED,GREEN_LED
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     9d4:	81 11       	cpse	r24, r1
     9d6:	21 c0       	rjmp	.+66     	; 0xa1a <__stack+0x1bb>
		{
			button_pressed=BUTTON_3;
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <button_pressed>
			while (Pushbutton_state(pd_3)==PRESSED)
     9de:	17 c0       	rjmp	.+46     	; 0xa0e <__stack+0x1af>
			{
				counter++;
     9e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
     9e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter+0x1>
     9e8:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter+0x2>
     9ec:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter+0x3>
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	a1 1d       	adc	r26, r1
     9f4:	b1 1d       	adc	r27, r1
     9f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
     9fa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter+0x1>
     9fe:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter+0x2>
     a02:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter+0x3>
     a06:	80 ea       	ldi	r24, 0xA0	; 160
     a08:	9f e0       	ldi	r25, 0x0F	; 15
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <__stack+0x1ab>
			}
		}
		else if(Pushbutton_state(pd_3)==PRESSED)//FRONT_LED,GREEN_LED
		{
			button_pressed=BUTTON_3;
			while (Pushbutton_state(pd_3)==PRESSED)
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     a14:	88 23       	and	r24, r24
     a16:	21 f3       	breq	.-56     	; 0x9e0 <__stack+0x181>
     a18:	29 c0       	rjmp	.+82     	; 0xa6c <__stack+0x20d>
			{
				counter++;
				_delay_ms(1);
			}
		}
		else if(Pushbutton_state(pd_4)==PRESSED)//BACK_LED,RED_LED
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     a20:	81 11       	cpse	r24, r1
     a22:	21 c0       	rjmp	.+66     	; 0xa66 <__stack+0x207>
		{
			button_pressed=BUTTON_4;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <button_pressed>
			while (Pushbutton_state(pd_4)==PRESSED)
     a2a:	17 c0       	rjmp	.+46     	; 0xa5a <__stack+0x1fb>
			{
				counter++;
     a2c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
     a30:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter+0x1>
     a34:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter+0x2>
     a38:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter+0x3>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	a1 1d       	adc	r26, r1
     a40:	b1 1d       	adc	r27, r1
     a42:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
     a46:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter+0x1>
     a4a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter+0x2>
     a4e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter+0x3>
     a52:	80 ea       	ldi	r24, 0xA0	; 160
     a54:	9f e0       	ldi	r25, 0x0F	; 15
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <__stack+0x1f7>
			}
		}
		else if(Pushbutton_state(pd_4)==PRESSED)//BACK_LED,RED_LED
		{
			button_pressed=BUTTON_4;
			while (Pushbutton_state(pd_4)==PRESSED)
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	0e 94 51 00 	call	0xa2	; 0xa2 <Pushbutton_state>
     a60:	88 23       	and	r24, r24
     a62:	21 f3       	breq	.-56     	; 0xa2c <__stack+0x1cd>
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <__stack+0x20d>
				_delay_ms(1);
			}
		}
		else
		{
			button_pressed=NO_BUTTON;
     a66:	85 e0       	ldi	r24, 0x05	; 5
     a68:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <button_pressed>
		}

		if((counter<1500)&&(counter>0))//PRESSED_ONCE,PRESSED_TWICE
     a6c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
     a70:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter+0x1>
     a74:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter+0x2>
     a78:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter+0x3>
     a7c:	ac 01       	movw	r20, r24
     a7e:	bd 01       	movw	r22, r26
     a80:	41 50       	subi	r20, 0x01	; 1
     a82:	51 09       	sbc	r21, r1
     a84:	61 09       	sbc	r22, r1
     a86:	71 09       	sbc	r23, r1
     a88:	4b 3d       	cpi	r20, 0xDB	; 219
     a8a:	55 40       	sbci	r21, 0x05	; 5
     a8c:	61 05       	cpc	r22, r1
     a8e:	71 05       	cpc	r23, r1
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	63 c0       	rjmp	.+198    	; 0xb5a <__stack+0x2fb>
		{
			
		   if( button_pressed==BUTTON_1)//pb1_RIGHT_WARNING
     a94:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	a1 f4       	brne	.+40     	; 0xac4 <__stack+0x265>
		  {	
				//if((pb1_State_right == LONG_HOLD) || (pb1_State_right == SHORT_HOLD) )
				//{
					//flag_Twice=1;
				//}
				if(flag_Twice_Right==0)
     a9c:	c1 11       	cpse	r28, r1
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
				{
					flag_Twice_Right=1;
					pb1_State_right = PRESSED_ONCE;
     aa0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <pb1_State_right>
				//{
					//flag_Twice=1;
				//}
				if(flag_Twice_Right==0)
				{
					flag_Twice_Right=1;
     aa4:	c1 e0       	ldi	r28, 0x01	; 1
     aa6:	0e c0       	rjmp	.+28     	; 0xac4 <__stack+0x265>
					pb1_State_right = PRESSED_ONCE;
					
				}
				else if(flag_Twice_Right==1)
     aa8:	c1 30       	cpi	r28, 0x01	; 1
     aaa:	61 f4       	brne	.+24     	; 0xac4 <__stack+0x265>
				{
					if(count_Twice_Right==0)
     aac:	ff 20       	and	r15, r15
     aae:	41 f0       	breq	.+16     	; 0xac0 <__stack+0x261>
					{
						count_Twice_Right=1;
			
					}
					else if(count_Twice_Right ==1)
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	f8 12       	cpse	r15, r24
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <__stack+0x265>
					{
						count_Twice_Right=0;
						flag_Twice_Right=0;
						pb1_State_right = PRESSED_TWICE;
     ab6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <pb1_State_right>
						count_Twice_Right=1;
			
					}
					else if(count_Twice_Right ==1)
					{
						count_Twice_Right=0;
     aba:	f1 2c       	mov	r15, r1
						flag_Twice_Right=0;
     abc:	c0 e0       	ldi	r28, 0x00	; 0
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x265>
				}
				else if(flag_Twice_Right==1)
				{
					if(count_Twice_Right==0)
					{
						count_Twice_Right=1;
     ac0:	ff 24       	eor	r15, r15
     ac2:	f3 94       	inc	r15
				}
				
				
		    }

		if( button_pressed==BUTTON_2)
     ac4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	a9 f4       	brne	.+42     	; 0xaf6 <__stack+0x297>
		{
			if(flag_Twice_Left==0)
     acc:	d1 11       	cpse	r29, r1
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <__stack+0x279>
			{
				flag_Twice_Left=1;
				pb2_State_left = PRESSED_ONCE;
     ad0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <pb2_State_left>

		if( button_pressed==BUTTON_2)
		{
			if(flag_Twice_Left==0)
			{
				flag_Twice_Left=1;
     ad4:	d1 e0       	ldi	r29, 0x01	; 1
     ad6:	0f c0       	rjmp	.+30     	; 0xaf6 <__stack+0x297>
				pb2_State_left = PRESSED_ONCE;
				
			}
			else if(flag_Twice_Left==1)
     ad8:	d1 30       	cpi	r29, 0x01	; 1
     ada:	69 f4       	brne	.+26     	; 0xaf6 <__stack+0x297>
			{
				if(count_Twice_Left==0)
     adc:	ee 20       	and	r14, r14
     ade:	49 f0       	breq	.+18     	; 0xaf2 <__stack+0x293>
				{
					count_Twice_Left=1;
					
				}
				else if(count_Twice_Left ==1)
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	e2 12       	cpse	r14, r18
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <__stack+0x297>
				{
					count_Twice_Left=0;
					flag_Twice_Left=0;
					pb2_State_left = PRESSED_TWICE;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <pb2_State_left>
					count_Twice_Left=1;
					
				}
				else if(count_Twice_Left ==1)
				{
					count_Twice_Left=0;
     aec:	e1 2c       	mov	r14, r1
					flag_Twice_Left=0;
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__stack+0x297>
			}
			else if(flag_Twice_Left==1)
			{
				if(count_Twice_Left==0)
				{
					count_Twice_Left=1;
     af2:	ee 24       	eor	r14, r14
     af4:	e3 94       	inc	r14
					pb2_State_left = PRESSED_TWICE;
				}
			}
		}

		if( button_pressed==BUTTON_3)
     af6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     afa:	83 30       	cpi	r24, 0x03	; 3
     afc:	a1 f4       	brne	.+40     	; 0xb26 <__stack+0x2c7>
		{
                if(flag_Twice_Front==0)
     afe:	11 11       	cpse	r17, r1
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <__stack+0x2ab>
                {
	                flag_Twice_Front=1;
	                pb3_State_front = PRESSED_ONCE;
     b02:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <pb3_State_front>

		if( button_pressed==BUTTON_3)
		{
                if(flag_Twice_Front==0)
                {
	                flag_Twice_Front=1;
     b06:	11 e0       	ldi	r17, 0x01	; 1
     b08:	0e c0       	rjmp	.+28     	; 0xb26 <__stack+0x2c7>
	                pb3_State_front = PRESSED_ONCE;
	                
                }
                else if(flag_Twice_Front==1)
     b0a:	11 30       	cpi	r17, 0x01	; 1
     b0c:	61 f4       	brne	.+24     	; 0xb26 <__stack+0x2c7>
                {
	                if(count_Twice_Front==0)
     b0e:	dd 20       	and	r13, r13
     b10:	41 f0       	breq	.+16     	; 0xb22 <__stack+0x2c3>
	                {
		                count_Twice_Front=1;
		                
	                }
	                else if(count_Twice_Front ==1)
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	d8 12       	cpse	r13, r24
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <__stack+0x2c7>
	                {
		                count_Twice_Front=0;
		                flag_Twice_Front=0;
		                pb3_State_front = PRESSED_TWICE;
     b18:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <pb3_State_front>
		                count_Twice_Front=1;
		                
	                }
	                else if(count_Twice_Front ==1)
	                {
		                count_Twice_Front=0;
     b1c:	d1 2c       	mov	r13, r1
		                flag_Twice_Front=0;
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x2c7>
                }
                else if(flag_Twice_Front==1)
                {
	                if(count_Twice_Front==0)
	                {
		                count_Twice_Front=1;
     b22:	dd 24       	eor	r13, r13
     b24:	d3 94       	inc	r13
		                pb3_State_front = PRESSED_TWICE;
	                }
				}
		}
		
		if( button_pressed==BUTTON_4)
     b26:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x2d1>
     b2e:	5a c0       	rjmp	.+180    	; 0xbe4 <__stack+0x385>
		{
                  if(flag_Twice_Back==0)
     b30:	01 11       	cpse	r16, r1
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__stack+0x2dd>
                  {
	                  flag_Twice_Back=1;
	                  pb4_State_back = PRESSED_ONCE;
     b34:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <pb4_State_back>
		
		if( button_pressed==BUTTON_4)
		{
                  if(flag_Twice_Back==0)
                  {
	                  flag_Twice_Back=1;
     b38:	01 e0       	ldi	r16, 0x01	; 1
     b3a:	54 c0       	rjmp	.+168    	; 0xbe4 <__stack+0x385>
	                  pb4_State_back = PRESSED_ONCE;
	                  
                  }
                  else if(flag_Twice_Back==1)
     b3c:	01 30       	cpi	r16, 0x01	; 1
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x2e3>
     b40:	51 c0       	rjmp	.+162    	; 0xbe4 <__stack+0x385>
                  {
	                  if(count_Twice_Back==0)
     b42:	cc 20       	and	r12, r12
     b44:	09 f4       	brne	.+2      	; 0xb48 <__stack+0x2e9>
     b46:	4c c0       	rjmp	.+152    	; 0xbe0 <__stack+0x381>
	                  {
		                  count_Twice_Back=1;
		                  
	                  }
	                  else if(count_Twice_Back ==1)
     b48:	21 e0       	ldi	r18, 0x01	; 1
     b4a:	c2 12       	cpse	r12, r18
     b4c:	4b c0       	rjmp	.+150    	; 0xbe4 <__stack+0x385>
	                  {
		                  count_Twice_Back=0;
		                  flag_Twice_Back=0;
		                  pb4_State_back = PRESSED_TWICE;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pb4_State_back>
		                  count_Twice_Back=1;
		                  
	                  }
	                  else if(count_Twice_Back ==1)
	                  {
		                  count_Twice_Back=0;
     b54:	c1 2c       	mov	r12, r1
		                  flag_Twice_Back=0;
     b56:	00 e0       	ldi	r16, 0x00	; 0
     b58:	45 c0       	rjmp	.+138    	; 0xbe4 <__stack+0x385>
                  }
		  
		}
	}
	
	else if(counter<3000)//short hold
     b5a:	88 3b       	cpi	r24, 0xB8	; 184
     b5c:	9b 40       	sbci	r25, 0x0B	; 11
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	f8 f4       	brcc	.+62     	; 0xba2 <__stack+0x343>
	{
		
		if (button_pressed==BUTTON_1 )
     b64:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	21 f4       	brne	.+8      	; 0xb74 <__stack+0x315>
		{
		    pb1_State_right = SHORT_HOLD ;
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <pb1_State_right>
     b72:	38 c0       	rjmp	.+112    	; 0xbe4 <__stack+0x385>
		}
		else if(button_pressed==BUTTON_2)
     b74:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	19 f4       	brne	.+6      	; 0xb82 <__stack+0x323>
		{
			pb2_State_left =SHORT_HOLD ;
     b7c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <pb2_State_left>
     b80:	31 c0       	rjmp	.+98     	; 0xbe4 <__stack+0x385>
		}
		else if(button_pressed==BUTTON_3)
     b82:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     b86:	83 30       	cpi	r24, 0x03	; 3
     b88:	21 f4       	brne	.+8      	; 0xb92 <__stack+0x333>
		{
			pb3_State_front = SHORT_HOLD ;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <pb3_State_front>
     b90:	29 c0       	rjmp	.+82     	; 0xbe4 <__stack+0x385>
		}

		else if(button_pressed==BUTTON_4)
     b92:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	29 f5       	brne	.+74     	; 0xbe4 <__stack+0x385>
		{
			pb4_State_back = SHORT_HOLD ;
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pb4_State_back>
     ba0:	21 c0       	rjmp	.+66     	; 0xbe4 <__stack+0x385>
		flag_Back=0;
	}

	else //long hold
	{
		if (button_pressed==BUTTON_1)
     ba2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	21 f4       	brne	.+8      	; 0xbb2 <__stack+0x353>
		{
			pb1_State_right = LONG_HOLD ;
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <pb1_State_right>
     bb0:	19 c0       	rjmp	.+50     	; 0xbe4 <__stack+0x385>
		}
		else if(button_pressed==BUTTON_2)
     bb2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <__stack+0x363>
		{
			pb2_State_left =LONG_HOLD ;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <pb2_State_left>
     bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <__stack+0x385>
		}
		else if(button_pressed==BUTTON_3)
     bc2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	19 f4       	brne	.+6      	; 0xbd0 <__stack+0x371>
		{
			pb3_State_front = LONG_HOLD ;
     bca:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <pb3_State_front>
     bce:	0a c0       	rjmp	.+20     	; 0xbe4 <__stack+0x385>
		}

		else if(button_pressed==BUTTON_4)
     bd0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <button_pressed>
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	31 f4       	brne	.+12     	; 0xbe4 <__stack+0x385>
		{
			pb4_State_back =LONG_HOLD ;
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pb4_State_back>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <__stack+0x385>
                  }
                  else if(flag_Twice_Back==1)
                  {
	                  if(count_Twice_Back==0)
	                  {
		                  count_Twice_Back=1;
     be0:	cc 24       	eor	r12, r12
     be2:	c3 94       	inc	r12
		flag_Left=0;
		flag_Front=0;
		flag_Back=0;
	}

	switch(pb1_State_right)
     be4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <pb1_State_right>
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	69 f0       	breq	.+26     	; 0xc06 <__stack+0x3a7>
     bec:	28 f0       	brcs	.+10     	; 0xbf8 <__stack+0x399>
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	89 f0       	breq	.+34     	; 0xc14 <__stack+0x3b5>
     bf2:	83 30       	cpi	r24, 0x03	; 3
     bf4:	b1 f0       	breq	.+44     	; 0xc22 <__stack+0x3c3>
     bf6:	1b c0       	rjmp	.+54     	; 0xc2e <__stack+0x3cf>
	{
	case PRESSED_ONCE :LCD_Write_stringGoTo(0,8,"ON   ");break;
     bf8:	47 ef       	ldi	r20, 0xF7	; 247
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	68 e0       	ldi	r22, 0x08	; 8
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c04:	14 c0       	rjmp	.+40     	; 0xc2e <__stack+0x3cf>
	case PRESSED_TWICE:LCD_Write_stringGoTo(0,8,"OFF  "); break;
     c06:	4d ef       	ldi	r20, 0xFD	; 253
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	68 e0       	ldi	r22, 0x08	; 8
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <__stack+0x3cf>
	case SHORT_HOLD   : LCD_Write_stringGoTo(0,8,"SHORT  "); break;
     c14:	43 e0       	ldi	r20, 0x03	; 3
     c16:	51 e0       	ldi	r21, 0x01	; 1
     c18:	68 e0       	ldi	r22, 0x08	; 8
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <__stack+0x3cf>
	case LONG_HOLD    :LCD_Write_stringGoTo(0,8,"LONG    "); break;
     c22:	4b e0       	ldi	r20, 0x0B	; 11
     c24:	51 e0       	ldi	r21, 0x01	; 1
     c26:	68 e0       	ldi	r22, 0x08	; 8
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	}

	switch(pb2_State_left)
     c2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <pb2_State_left>
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	69 f0       	breq	.+26     	; 0xc50 <__stack+0x3f1>
     c36:	28 f0       	brcs	.+10     	; 0xc42 <__stack+0x3e3>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	89 f0       	breq	.+34     	; 0xc5e <__stack+0x3ff>
     c3c:	83 30       	cpi	r24, 0x03	; 3
     c3e:	b1 f0       	breq	.+44     	; 0xc6c <__stack+0x40d>
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <__stack+0x419>
	{
	case PRESSED_ONCE :LCD_Write_stringGoTo(1,8,"ON   ");break;
     c42:	47 ef       	ldi	r20, 0xF7	; 247
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	68 e0       	ldi	r22, 0x08	; 8
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c4e:	14 c0       	rjmp	.+40     	; 0xc78 <__stack+0x419>
	case PRESSED_TWICE:LCD_Write_stringGoTo(1,8,"OFF  "); break;
     c50:	4d ef       	ldi	r20, 0xFD	; 253
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	68 e0       	ldi	r22, 0x08	; 8
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <__stack+0x419>
	case SHORT_HOLD   : LCD_Write_stringGoTo(1,8,"SHORT  "); break;
     c5e:	43 e0       	ldi	r20, 0x03	; 3
     c60:	51 e0       	ldi	r21, 0x01	; 1
     c62:	68 e0       	ldi	r22, 0x08	; 8
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <__stack+0x419>
	case LONG_HOLD    :LCD_Write_stringGoTo(1,8,"LONG    "); break;
     c6c:	4b e0       	ldi	r20, 0x0B	; 11
     c6e:	51 e0       	ldi	r21, 0x01	; 1
     c70:	68 e0       	ldi	r22, 0x08	; 8
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	}
	switch(pb3_State_front)
     c78:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <pb3_State_front>
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	69 f0       	breq	.+26     	; 0xc9a <__stack+0x43b>
     c80:	28 f0       	brcs	.+10     	; 0xc8c <__stack+0x42d>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	89 f0       	breq	.+34     	; 0xca8 <__stack+0x449>
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	b1 f0       	breq	.+44     	; 0xcb6 <__stack+0x457>
     c8a:	1b c0       	rjmp	.+54     	; 0xcc2 <__stack+0x463>
	{
	case PRESSED_ONCE :LCD_Write_stringGoTo(2,8,"ON   ");break;
     c8c:	47 ef       	ldi	r20, 0xF7	; 247
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	68 e0       	ldi	r22, 0x08	; 8
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <__stack+0x463>
	case PRESSED_TWICE:LCD_Write_stringGoTo(2,8,"OFF  "); break;
     c9a:	4d ef       	ldi	r20, 0xFD	; 253
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	68 e0       	ldi	r22, 0x08	; 8
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     ca6:	0d c0       	rjmp	.+26     	; 0xcc2 <__stack+0x463>
	case SHORT_HOLD   : LCD_Write_stringGoTo(2,8,"SHORT  "); break;
     ca8:	43 e0       	ldi	r20, 0x03	; 3
     caa:	51 e0       	ldi	r21, 0x01	; 1
     cac:	68 e0       	ldi	r22, 0x08	; 8
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <__stack+0x463>
	case LONG_HOLD    :LCD_Write_stringGoTo(2,8,"LONG    "); break;
     cb6:	4b e0       	ldi	r20, 0x0B	; 11
     cb8:	51 e0       	ldi	r21, 0x01	; 1
     cba:	68 e0       	ldi	r22, 0x08	; 8
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
	}
	switch(pb4_State_back)
     cc2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <pb4_State_back>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	69 f0       	breq	.+26     	; 0xce4 <__stack+0x485>
     cca:	28 f0       	brcs	.+10     	; 0xcd6 <__stack+0x477>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	89 f0       	breq	.+34     	; 0xcf2 <__stack+0x493>
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	b1 f0       	breq	.+44     	; 0xd00 <__stack+0x4a1>
     cd4:	28 ce       	rjmp	.-944    	; 0x926 <__stack+0xc7>
	{
	case PRESSED_ONCE :LCD_Write_stringGoTo(3,8,"ON   ");break;
     cd6:	47 ef       	ldi	r20, 0xF7	; 247
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	68 e0       	ldi	r22, 0x08	; 8
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     ce2:	21 ce       	rjmp	.-958    	; 0x926 <__stack+0xc7>
	case PRESSED_TWICE:LCD_Write_stringGoTo(3,8,"OFF  "); break;
     ce4:	4d ef       	ldi	r20, 0xFD	; 253
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	68 e0       	ldi	r22, 0x08	; 8
     cea:	83 e0       	ldi	r24, 0x03	; 3
     cec:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     cf0:	1a ce       	rjmp	.-972    	; 0x926 <__stack+0xc7>
	case SHORT_HOLD   : LCD_Write_stringGoTo(3,8,"SHORT  "); break;
     cf2:	43 e0       	ldi	r20, 0x03	; 3
     cf4:	51 e0       	ldi	r21, 0x01	; 1
     cf6:	68 e0       	ldi	r22, 0x08	; 8
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     cfe:	13 ce       	rjmp	.-986    	; 0x926 <__stack+0xc7>
	case LONG_HOLD    :LCD_Write_stringGoTo(3,8,"LONG    "); break;
     d00:	4b e0       	ldi	r20, 0x0B	; 11
     d02:	51 e0       	ldi	r21, 0x01	; 1
     d04:	68 e0       	ldi	r22, 0x08	; 8
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_Write_stringGoTo>
     d0c:	0c ce       	rjmp	.-1000   	; 0x926 <__stack+0xc7>

00000d0e <DIO_vSetPinMode>:
     d0e:	e8 2f       	mov	r30, r24
     d10:	e6 95       	lsr	r30
     d12:	e6 95       	lsr	r30
     d14:	e6 95       	lsr	r30
     d16:	48 2f       	mov	r20, r24
     d18:	47 70       	andi	r20, 0x07	; 7
     d1a:	62 30       	cpi	r22, 0x02	; 2
     d1c:	b0 f4       	brcc	.+44     	; 0xd4a <DIO_vSetPinMode+0x3c>
     d1e:	ae 2f       	mov	r26, r30
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	aa 0f       	add	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	a4 58       	subi	r26, 0x84	; 132
     d2a:	bf 4f       	sbci	r27, 0xFF	; 255
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	2c 91       	ld	r18, X
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	04 2e       	mov	r0, r20
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_vSetPinMode+0x32>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_vSetPinMode+0x2e>
     d44:	82 2b       	or	r24, r18
     d46:	8c 93       	st	X, r24
     d48:	16 c0       	rjmp	.+44     	; 0xd76 <DIO_vSetPinMode+0x68>
     d4a:	ae 2f       	mov	r26, r30
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	aa 0f       	add	r26, r26
     d52:	bb 1f       	adc	r27, r27
     d54:	a4 58       	subi	r26, 0x84	; 132
     d56:	bf 4f       	sbci	r27, 0xFF	; 255
     d58:	0d 90       	ld	r0, X+
     d5a:	bc 91       	ld	r27, X
     d5c:	a0 2d       	mov	r26, r0
     d5e:	8c 91       	ld	r24, X
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	04 2e       	mov	r0, r20
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_vSetPinMode+0x5e>
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_vSetPinMode+0x5a>
     d70:	20 95       	com	r18
     d72:	28 23       	and	r18, r24
     d74:	2c 93       	st	X, r18
     d76:	61 30       	cpi	r22, 0x01	; 1
     d78:	11 f0       	breq	.+4      	; 0xd7e <DIO_vSetPinMode+0x70>
     d7a:	63 30       	cpi	r22, 0x03	; 3
     d7c:	99 f4       	brne	.+38     	; 0xda4 <DIO_vSetPinMode+0x96>
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e4 58       	subi	r30, 0x84	; 132
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	01 90       	ld	r0, Z+
     d8a:	f0 81       	ld	r31, Z
     d8c:	e0 2d       	mov	r30, r0
     d8e:	20 81       	ld	r18, Z
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_vSetPinMode+0x8c>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	4a 95       	dec	r20
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_vSetPinMode+0x88>
     d9e:	82 2b       	or	r24, r18
     da0:	80 83       	st	Z, r24
     da2:	08 95       	ret
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	e4 58       	subi	r30, 0x84	; 132
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	01 90       	ld	r0, Z+
     db0:	f0 81       	ld	r31, Z
     db2:	e0 2d       	mov	r30, r0
     db4:	20 81       	ld	r18, Z
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_vSetPinMode+0xb2>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	4a 95       	dec	r20
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_vSetPinMode+0xae>
     dc4:	80 95       	com	r24
     dc6:	82 23       	and	r24, r18
     dc8:	80 83       	st	Z, r24
     dca:	08 95       	ret

00000dcc <DIO_u8GetPinValue>:
     dcc:	e8 2f       	mov	r30, r24
     dce:	e6 95       	lsr	r30
     dd0:	e6 95       	lsr	r30
     dd2:	e6 95       	lsr	r30
     dd4:	28 2f       	mov	r18, r24
     dd6:	27 70       	andi	r18, 0x07	; 7
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	38 96       	adiw	r30, 0x08	; 8
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	e4 58       	subi	r30, 0x84	; 132
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	01 90       	ld	r0, Z+
     de6:	f0 81       	ld	r31, Z
     de8:	e0 2d       	mov	r30, r0
     dea:	90 81       	ld	r25, Z
     dec:	89 2f       	mov	r24, r25
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_u8GetPinValue+0x2a>
     df2:	95 95       	asr	r25
     df4:	87 95       	ror	r24
     df6:	2a 95       	dec	r18
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_u8GetPinValue+0x26>
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	08 95       	ret

00000dfe <__vector_1>:
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
     e20:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <INT0_Fptr>
     e24:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <INT0_Fptr+0x1>
     e28:	30 97       	sbiw	r30, 0x00	; 0
     e2a:	09 f0       	breq	.+2      	; 0xe2e <__vector_1+0x30>
     e2c:	09 95       	icall
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_2>:
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
     e72:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <INT1_Fptr>
     e76:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <INT1_Fptr+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_2+0x30>
     e7e:	09 95       	icall
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_3>:
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <INT2_Fptr>
     ec8:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <INT2_Fptr+0x1>
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_3+0x30>
     ed0:	09 95       	icall
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <TIMER0_Init>:
	Timer2_OVF_Fptr=local_fptr;
}

void TIMER2_OC_SetCallBack(void(*local_fptr)(void))
{
	Timer2_OC_Fptr=local_fptr;
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	69 f0       	breq	.+26     	; 0xf12 <TIMER0_Init+0x1e>
     ef8:	28 f0       	brcs	.+10     	; 0xf04 <TIMER0_Init+0x10>
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	89 f0       	breq	.+34     	; 0xf20 <TIMER0_Init+0x2c>
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	b1 f0       	breq	.+44     	; 0xf2e <TIMER0_Init+0x3a>
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <TIMER0_Init+0x46>
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	83 bf       	out	0x33, r24	; 51
     f0a:	83 b7       	in	r24, 0x33	; 51
     f0c:	87 7f       	andi	r24, 0xF7	; 247
     f0e:	83 bf       	out	0x33, r24	; 51
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <TIMER0_Init+0x46>
     f12:	83 b7       	in	r24, 0x33	; 51
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	83 bf       	out	0x33, r24	; 51
     f18:	83 b7       	in	r24, 0x33	; 51
     f1a:	87 7f       	andi	r24, 0xF7	; 247
     f1c:	83 bf       	out	0x33, r24	; 51
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <TIMER0_Init+0x46>
     f20:	83 b7       	in	r24, 0x33	; 51
     f22:	8f 7b       	andi	r24, 0xBF	; 191
     f24:	83 bf       	out	0x33, r24	; 51
     f26:	83 b7       	in	r24, 0x33	; 51
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	83 bf       	out	0x33, r24	; 51
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <TIMER0_Init+0x46>
     f2e:	83 b7       	in	r24, 0x33	; 51
     f30:	80 64       	ori	r24, 0x40	; 64
     f32:	83 bf       	out	0x33, r24	; 51
     f34:	83 b7       	in	r24, 0x33	; 51
     f36:	88 60       	ori	r24, 0x08	; 8
     f38:	83 bf       	out	0x33, r24	; 51
     f3a:	86 2f       	mov	r24, r22
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	91 05       	cpc	r25, r1
     f42:	08 f0       	brcs	.+2      	; 0xf46 <TIMER0_Init+0x52>
     f44:	54 c0       	rjmp	.+168    	; 0xfee <TIMER0_Init+0xfa>
     f46:	fc 01       	movw	r30, r24
     f48:	e6 5d       	subi	r30, 0xD6	; 214
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__tablejump2__>
     f50:	83 b7       	in	r24, 0x33	; 51
     f52:	8e 7f       	andi	r24, 0xFE	; 254
     f54:	83 bf       	out	0x33, r24	; 51
     f56:	83 b7       	in	r24, 0x33	; 51
     f58:	8d 7f       	andi	r24, 0xFD	; 253
     f5a:	83 bf       	out	0x33, r24	; 51
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	8b 7f       	andi	r24, 0xFB	; 251
     f60:	83 bf       	out	0x33, r24	; 51
     f62:	08 95       	ret
     f64:	83 b7       	in	r24, 0x33	; 51
     f66:	81 60       	ori	r24, 0x01	; 1
     f68:	83 bf       	out	0x33, r24	; 51
     f6a:	83 b7       	in	r24, 0x33	; 51
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	83 bf       	out	0x33, r24	; 51
     f70:	83 b7       	in	r24, 0x33	; 51
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	83 bf       	out	0x33, r24	; 51
     f76:	08 95       	ret
     f78:	83 b7       	in	r24, 0x33	; 51
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	83 bf       	out	0x33, r24	; 51
     f7e:	83 b7       	in	r24, 0x33	; 51
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	83 bf       	out	0x33, r24	; 51
     f84:	83 b7       	in	r24, 0x33	; 51
     f86:	8b 7f       	andi	r24, 0xFB	; 251
     f88:	83 bf       	out	0x33, r24	; 51
     f8a:	08 95       	ret
     f8c:	83 b7       	in	r24, 0x33	; 51
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	83 bf       	out	0x33, r24	; 51
     f92:	83 b7       	in	r24, 0x33	; 51
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	83 bf       	out	0x33, r24	; 51
     f98:	83 b7       	in	r24, 0x33	; 51
     f9a:	8b 7f       	andi	r24, 0xFB	; 251
     f9c:	83 bf       	out	0x33, r24	; 51
     f9e:	08 95       	ret
     fa0:	83 b7       	in	r24, 0x33	; 51
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	83 bf       	out	0x33, r24	; 51
     fa6:	83 b7       	in	r24, 0x33	; 51
     fa8:	8d 7f       	andi	r24, 0xFD	; 253
     faa:	83 bf       	out	0x33, r24	; 51
     fac:	83 b7       	in	r24, 0x33	; 51
     fae:	84 60       	ori	r24, 0x04	; 4
     fb0:	83 bf       	out	0x33, r24	; 51
     fb2:	08 95       	ret
     fb4:	83 b7       	in	r24, 0x33	; 51
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	83 bf       	out	0x33, r24	; 51
     fba:	83 b7       	in	r24, 0x33	; 51
     fbc:	8d 7f       	andi	r24, 0xFD	; 253
     fbe:	83 bf       	out	0x33, r24	; 51
     fc0:	83 b7       	in	r24, 0x33	; 51
     fc2:	84 60       	ori	r24, 0x04	; 4
     fc4:	83 bf       	out	0x33, r24	; 51
     fc6:	08 95       	ret
     fc8:	83 b7       	in	r24, 0x33	; 51
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	83 bf       	out	0x33, r24	; 51
     fce:	83 b7       	in	r24, 0x33	; 51
     fd0:	82 60       	ori	r24, 0x02	; 2
     fd2:	83 bf       	out	0x33, r24	; 51
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	84 60       	ori	r24, 0x04	; 4
     fd8:	83 bf       	out	0x33, r24	; 51
     fda:	08 95       	ret
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	81 60       	ori	r24, 0x01	; 1
     fe0:	83 bf       	out	0x33, r24	; 51
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	82 60       	ori	r24, 0x02	; 2
     fe6:	83 bf       	out	0x33, r24	; 51
     fe8:	83 b7       	in	r24, 0x33	; 51
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	83 bf       	out	0x33, r24	; 51
     fee:	08 95       	ret

00000ff0 <TIMER0_OVF_InterruptEnable>:
     ff0:	89 b7       	in	r24, 0x39	; 57
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	89 bf       	out	0x39, r24	; 57
     ff6:	08 95       	ret

00000ff8 <TIMER0_OVF_SetCallBack>:
     ff8:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Timer0_OVF_Fptr+0x1>
     ffc:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Timer0_OVF_Fptr>
    1000:	08 95       	ret

00001002 <__vector_11>:
    1002:	1f 92       	push	r1
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	0f 92       	push	r0
    100a:	11 24       	eor	r1, r1
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <Timer0_OVF_Fptr>
    1028:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <Timer0_OVF_Fptr+0x1>
    102c:	30 97       	sbiw	r30, 0x00	; 0
    102e:	09 f0       	breq	.+2      	; 0x1032 <__vector_11+0x30>
    1030:	09 95       	icall
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <__vector_10>:
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <Timer0_OC_Fptr>
    107a:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <Timer0_OC_Fptr+0x1>
    107e:	30 97       	sbiw	r30, 0x00	; 0
    1080:	09 f0       	breq	.+2      	; 0x1084 <__vector_10+0x30>
    1082:	09 95       	icall
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	7f 91       	pop	r23
    1092:	6f 91       	pop	r22
    1094:	5f 91       	pop	r21
    1096:	4f 91       	pop	r20
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_9>:
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	2f 93       	push	r18
    10b2:	3f 93       	push	r19
    10b4:	4f 93       	push	r20
    10b6:	5f 93       	push	r21
    10b8:	6f 93       	push	r22
    10ba:	7f 93       	push	r23
    10bc:	8f 93       	push	r24
    10be:	9f 93       	push	r25
    10c0:	af 93       	push	r26
    10c2:	bf 93       	push	r27
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
    10c8:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <Timer1_OVF_Fptr>
    10cc:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <Timer1_OVF_Fptr+0x1>
    10d0:	30 97       	sbiw	r30, 0x00	; 0
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <__vector_9+0x30>
    10d4:	09 95       	icall
    10d6:	ff 91       	pop	r31
    10d8:	ef 91       	pop	r30
    10da:	bf 91       	pop	r27
    10dc:	af 91       	pop	r26
    10de:	9f 91       	pop	r25
    10e0:	8f 91       	pop	r24
    10e2:	7f 91       	pop	r23
    10e4:	6f 91       	pop	r22
    10e6:	5f 91       	pop	r21
    10e8:	4f 91       	pop	r20
    10ea:	3f 91       	pop	r19
    10ec:	2f 91       	pop	r18
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_7>:
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Timer1_OCA_Fptr>
    111e:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <Timer1_OCA_Fptr+0x1>
    1122:	30 97       	sbiw	r30, 0x00	; 0
    1124:	09 f0       	breq	.+2      	; 0x1128 <__vector_7+0x30>
    1126:	09 95       	icall
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <__vector_8>:
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	2f 93       	push	r18
    1156:	3f 93       	push	r19
    1158:	4f 93       	push	r20
    115a:	5f 93       	push	r21
    115c:	6f 93       	push	r22
    115e:	7f 93       	push	r23
    1160:	8f 93       	push	r24
    1162:	9f 93       	push	r25
    1164:	af 93       	push	r26
    1166:	bf 93       	push	r27
    1168:	ef 93       	push	r30
    116a:	ff 93       	push	r31
    116c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <Timer1_OCB_Fptr>
    1170:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <Timer1_OCB_Fptr+0x1>
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f0       	breq	.+2      	; 0x117a <__vector_8+0x30>
    1178:	09 95       	icall
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_6>:
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Timer1_ICU_Fptr>
    11c2:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Timer1_ICU_Fptr+0x1>
    11c6:	30 97       	sbiw	r30, 0x00	; 0
    11c8:	09 f0       	breq	.+2      	; 0x11cc <__vector_6+0x30>
    11ca:	09 95       	icall
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	0f 90       	pop	r0
    11ea:	1f 90       	pop	r1
    11ec:	18 95       	reti

000011ee <__vector_5>:
}



ISR(TIMER2_OVF_vect)
{
    11ee:	1f 92       	push	r1
    11f0:	0f 92       	push	r0
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	0f 92       	push	r0
    11f6:	11 24       	eor	r1, r1
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULLPTR)
    1210:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Timer2_OVF_Fptr>
    1214:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <Timer2_OVF_Fptr+0x1>
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	09 f0       	breq	.+2      	; 0x121e <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
    121c:	09 95       	icall
	}
}
    121e:	ff 91       	pop	r31
    1220:	ef 91       	pop	r30
    1222:	bf 91       	pop	r27
    1224:	af 91       	pop	r26
    1226:	9f 91       	pop	r25
    1228:	8f 91       	pop	r24
    122a:	7f 91       	pop	r23
    122c:	6f 91       	pop	r22
    122e:	5f 91       	pop	r21
    1230:	4f 91       	pop	r20
    1232:	3f 91       	pop	r19
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_4>:

ISR(TIMER2_OC_vect)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if(Timer2_OC_Fptr!=NULLPTR)
    1262:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <Timer2_OC_Fptr>
    1266:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <Timer2_OC_Fptr+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_4+0x30>
	{
		Timer2_OC_Fptr();
    126e:	09 95       	icall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__tablejump2__>:
    1292:	ee 0f       	add	r30, r30
    1294:	ff 1f       	adc	r31, r31
    1296:	05 90       	lpm	r0, Z+
    1298:	f4 91       	lpm	r31, Z
    129a:	e0 2d       	mov	r30, r0
    129c:	09 94       	ijmp

0000129e <__umulhisi3>:
    129e:	a2 9f       	mul	r26, r18
    12a0:	b0 01       	movw	r22, r0
    12a2:	b3 9f       	mul	r27, r19
    12a4:	c0 01       	movw	r24, r0
    12a6:	a3 9f       	mul	r26, r19
    12a8:	70 0d       	add	r23, r0
    12aa:	81 1d       	adc	r24, r1
    12ac:	11 24       	eor	r1, r1
    12ae:	91 1d       	adc	r25, r1
    12b0:	b2 9f       	mul	r27, r18
    12b2:	70 0d       	add	r23, r0
    12b4:	81 1d       	adc	r24, r1
    12b6:	11 24       	eor	r1, r1
    12b8:	91 1d       	adc	r25, r1
    12ba:	08 95       	ret

000012bc <_exit>:
    12bc:	f8 94       	cli

000012be <__stop_program>:
    12be:	ff cf       	rjmp	.-2      	; 0x12be <__stop_program>
